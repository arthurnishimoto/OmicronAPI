package omicron;

public class EventBase
{
    //! Enumerates the service classes supported by omicron. Each service class generates 
    //! events with the same structure.
	//! static final ints not optimal solution, but done for ease of conversion
    //! (Can't set starting index of enums in Java)
    public class ServiceType
    {
    	static final int ServiceTypePointer = 0;
    	static final int ServiceTypeMocap = 1;
    	static final int ServiceTypeKeyboard = 2;
    	static final int ServiceTypeController = 3;
    	static final int ServiceTypeUi = 4;
    	static final int ServiceTypeGeneric = 5;
    	static final int ServiceTypeBrain = 6;
    	static final int ServiceTypeWand = 7;
    	static final int ServiceTypeSpeech = 8;
    	static final int ServiceTypeAny = -1;
    };

    //! #PYAPI Supported event types.
    //! The python API exposed this enum in the EventType object.
    //! static final ints not optimal solution, but done for ease of conversion
    //! (Can't set starting index of enums in Java)
    public class Type
    {
        //! Select: generated when the source of the event gets selected or activated.
        //! Used primarily for use interface controls.
        static final int Select = 0;
        //! Toggle: generated when some boolean state in the event source changes. Can represent
        //! state changes in physical switches and buttons, or in user interface controls like
        //! check boxes and radio buttons.
        static final int Toggle = 1;
        //!ChangeValue: generated when the source of an event changes it's internal value or state.
        //! Different from Update because ChangeValue is not usually fired at regular intervals,
        //! while Update events are normally sent at a constant rate.
        static final int ChangeValue = 2;
        //! Update: Generated when the soruce of an event gets updated (what 'update') means depends
        //! on the event source.
        static final int Update = 3;
        //! Move: Generated whenever the source of an event moves.
        static final int Move = 4;
        //! Down: generated when the source of an event goes to a logical 'down' state (i.e. touch on a surface or 
        //! a mouse button press count as Down events)
        static final int Down = 5;
        //! Up: generated when the source of an event goes to a logical 'up' state (i.e. remove touch from a surface or 
        //! a mouse button release count as Up events)
        static final int Up = 6;
        //! Trace: generated when a new object is identified by the device managed by the input service 
        //! (i.e head tracking, or a mocap system rigid body).
        static final int Trace = 7;
        //! Alternate name for Trace events
        static final int Connect = Trace;
        //! Trace: generated when a traced object is lost by the device managed by the input service 
        //! (i.e head tracking, or a mocap system rigid body).
        static final int Untrace = 8;
        //! Alternate name for Untrace events
        static final int Disconnect = Untrace;
        //! Click: generated on a down followed by an immediate up event.
        //! parameters: position
        static final int Click = 9;
        //! DoubleClick: generated by a sequence of quick down/up/down/up events.
        //! parameters: position.
        static final int DoubleClick = 10;
        //! MoveLeft: generated when the source of event goes toward the left of the screen.
        //! parameters: position.
        static final int MoveLeft = 11;
        //! MoveRight: generated when the source of event goes toward the right of the screen.
        //! parameters: position.
        static final int MoveRight = 12;
        //! MoveUp: generated when the source of event goes toward the top of the screen.
        //! parameters: position.
        static final int MoveUp = 13;
        //! MoveDown: generated when the source of event goes toward the bottom of the screen.
        //! parameters: position.
        static final int MoveDown = 14;
        //! Zoom: zoom event.
        static final int Zoom = 15;
        //! SplitStart: generated at the start of a split/zoom gesture.
        //! parameters: position (center of gesture) pointSet[0, 1] (individual finger positions) .
        static final int SplitStart = 16;
        //! SplitEnd: generated at the end of a split/zoom gesture.
        //! parameters: position (center of gesture) pointSet[0, 1] (individual finger positions) .
        static final int SplitEnd = 17;
        //! Split: generated during a split/zoom gesture. 
        //! parameters: position (center of gesture) pointSet[0, 1] (individual finger positions), value[0] (delta distance) value[1] (delta ratio) .
        static final int Split = 18;
        //! RotateStart: generated at the start of a rotation gesture.
        //! parameters: position (center of gesture) pointSet[0, 1] (individual finger positions) .
        static final int RotateStart = 19;
        //! RotateEnd: generated at the end of a rotation gesture.
        //! parameters: position (center of gesture) pointSet[0, 1] (individual finger positions) .
        static final int RotateEnd = 20;
        //! Rotate: generated when an event source is stationary while a second source is rotating around the first.
        //! parameters: position (center of gesture) pointSet[0, 1] (individual finger positions), rotation[0] (degrees).
        static final int Rotate = 21;
        //! Null: generic null value for event type.
        static final int Null = 22;
    };
    //! #PYAPI Defines some generic input event flags
    public class Flags
    {
        //! Used for right mouse button or equivalent events.
    	static final int Left = 1 << 0;
        //! Generic name for left / main button
    	static final int Button1 = 1 << 0;

        //! Used for right mouse button or equivalent events.
    	static final int Right = 1 << 1;
        //! Generic name for right / secondary button
    	static final int Button2 = 1 << 1;

        //! Used for middle mouse button or equivalent events.
    	static final int Middle = 1 << 2;
        //! Generic name for middle / tertiary button
    	static final int Button3 = 1 << 2;

        //! Used for ctrl key presses or equivalent events.
    	static final int Ctrl = 1 << 3;
        //! Generic name for control key / primary modifier button
    	static final int SpecialButton1 = 1 << 3;

        //! Used for ctrl key presses or equivalent events.
    	static final int Alt = 1 << 4;
        //! Generic name for alt key / secondary modifier button
    	static final int SpecialButton2 = 1 << 4;

        //! Used for ctrl key presses or equivalent events.
    	static final int Shift = 1 << 5;
        //! Generic name for shift key / tertiary modifier button
    	static final int SpecialButton3 = 1 << 5;

        //! Generic name for additional button 4
    	static final int Button4 = 1 << 6;
        //! Generic name for additional button 5
    	static final int Button5 = 1 << 7;
        //! Generic name for additional button 6
    	static final int Button6 = 1 << 8;
        //! Generic name for additional button 7
    	static final int Button7 = 1 << 9;

        //! Generic name for digital up button
    	static final int ButtonUp = 1 << 10;
        //! Generic name for digital down button
    	static final int ButtonDown = 1 << 11;
        //! Generic name for digital left button
    	static final int ButtonLeft = 1 << 12;
        //! Generic name for digital right button
    	static final int ButtonRight = 1 << 13;

        //! INTERNAL: Used to mark events that have been processed
    	static final int Processed = 1 << 14;
        //! User flags should offset this value: 16 user flags available (USER to USER << 16)
    	static final int User = 1 << 18;
		
		//! Generic name for additional button 8
    	static final int Button8 = 1 << 15;
		//! Generic name for additional button 9
    	static final int Button9 = 1 << 16;
    };

    public enum ExtraDataType
    {
        ExtraDataNull,
        ExtraDataFloatArray,
        ExtraDataIntArray,
        ExtraDataVector3Array,
        ExtraDataString
    };

    //! Joint enumerations for Kinect (Uses OpenNI's enumerations with additional Kinect for Windows values)
    //! See MSKinectService.h, XnTypes.h (OpenNI), or NuiSensor.h (Kinect for Windows)
    public enum OmicronSkeletonJoint
    {
        OMICRON_SKEL_HIP_CENTER,
        OMICRON_SKEL_HEAD,
        OMICRON_SKEL_NECK,
        OMICRON_SKEL_TORSO,
        OMICRON_SKEL_WAIST,

        OMICRON_SKEL_LEFT_COLLAR,
        OMICRON_SKEL_LEFT_SHOULDER,
        OMICRON_SKEL_LEFT_ELBOW,
        OMICRON_SKEL_LEFT_WRIST,
        OMICRON_SKEL_LEFT_HAND,
        OMICRON_SKEL_LEFT_FINGERTIP,

        OMICRON_SKEL_LEFT_HIP,
        OMICRON_SKEL_LEFT_KNEE,
        OMICRON_SKEL_LEFT_ANKLE,
        OMICRON_SKEL_LEFT_FOOT,

        OMICRON_SKEL_RIGHT_COLLAR,
        OMICRON_SKEL_RIGHT_SHOULDER,
        OMICRON_SKEL_RIGHT_ELBOW,
        OMICRON_SKEL_RIGHT_WRIST,
        OMICRON_SKEL_RIGHT_HAND,
        OMICRON_SKEL_RIGHT_FINGERTIP,

        OMICRON_SKEL_RIGHT_HIP,
        OMICRON_SKEL_RIGHT_KNEE,
        OMICRON_SKEL_RIGHT_ANKLE,
        OMICRON_SKEL_RIGHT_FOOT,

        OMICRON_SKEL_SPINE,
        OMICRON_SKEL_SHOULDER_CENTER,

        OMICRON_SKEL_COUNT
    };
};
